// Generated by CoffeeScript 1.6.2
(function() {
  var gb;

  gb = {};

  gb.ui = {};

  gb.ui.Chart = function(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.chartLeft = 60;
    this.chartTop = 60;
    this.chartRight = this.width - 60;
    this.chartBottom = this.height - 100;
    this.chartWidth = this.chartRight - this.chartLeft;
    this.chartHeight = this.chartBottom - this.chartTop;
    this.barCeiling = this.chartHeight - 40;
    this.topInterval = 0;
    this.chart = Raphael(this.x, this.y, this.width, this.height);
    this.tickXPos = 30;
    this.tickMarks = null;
    this.textBox = this.chart.text(50, 20, "").attr({
      font: "14pt 'Arial'"
    });
    this.minText = this.chart.text(200, 20, "min:").attr({
      font: "14pt 'Arial'"
    });
    this.maxText = this.chart.text(200, 40, "max:").attr({
      font: "14pt 'Arial'"
    });
    this.topIntervalText = this.chart.text(400, 40, "top:").attr({
      font: "14pt 'Arial'"
    });
    this.chartArea = this.chart.rect(this.chartLeft, this.chartTop, this.chartWidth, this.chartHeight).attr({
      fill: "#efefef",
      "stroke-width": 1,
      stroke: "#666"
    });
    this.numberOfBars = 15;
    this.barWidth = 40;
    this.barSpacing = 20;
    this.bars = [];
    this.data = [];
    this.tickCount = 5;
    this.roundUpTo = 100;
    return this.generatorIndex = 1;
  };

  gb.ui.Chart.prototype.init = function() {
    return this.data = util.randomArray(this.numberOfBars, this.generatorIndex * 100);
  };

  gb.ui.Chart.prototype.grid = function(horizontal, vertical) {
    var i, path, _results;

    i = 1;
    while (i < this.height) {
      path = "M0 " + i + " H" + this.width;
      this.chart.path(path).attr({
        "stroke-width": 0.1
      });
      i += vertical;
    }
    i = 1;
    _results = [];
    while (i < this.width) {
      path = "M" + i + " 0 V" + this.height;
      this.chart.path(path).attr({
        "stroke-width": 0.1
      });
      _results.push(i += horizontal);
    }
    return _results;
  };

  gb.ui.Chart.prototype.draw = function() {
    var i, _results;

    if (this.data.length) {
      i = 0;
      _results = [];
      while (i < this.data.length) {
        if (this.bars[i]) {
          this.bars[i].remove();
        }
        this.bars[i] = this.drawBar(i, this.data[i]);
        _results.push(i++);
      }
      return _results;
    }
  };

  gb.ui.Chart.prototype.drawBar = function(i, value) {
    var objSet, thisObj, xPos, xPosText, yPos, yPosText;

    xPos = this.chartLeft + (i * (this.barWidth + this.barSpacing));
    yPos = this.chartBottom - value;
    thisObj = this;
    objSet = this.chart.set();
    objSet.push(this.chart.rect(xPos, yPos, this.barWidth, value).attr({
      fill: "#fff",
      "stroke-width": 0
    }).click(function() {
      var text;

      text = "selected: " + i;
      return thisObj.textBox.attr("text", text);
    }));
    xPosText = xPos + this.barWidth / 2;
    yPosText = yPos - 10;
    objSet.push(this.chart.text(xPosText, yPosText, value).attr({
      font: "10pt 'Arial'",
      fill: "#666"
    }));
    return objSet;
  };

  gb.ui.Chart.prototype.drawTickMarks = function() {
    var i, tickIntervalValue, tickLabel, tickSet, yPos;

    tickIntervalValue = this.topInterval / this.tickCount;
    if (this.tickMarks) {
      this.tickMarks.remove();
    }
    tickSet = this.chart.set();
    i = 1;
    while (i <= this.tickCount) {
      tickLabel = tickIntervalValue * i;
      yPos = this.chartBottom - this.scaledValue(tickIntervalValue * i);
      tickSet.push(this.chart.text(this.tickXPos, yPos, tickLabel).attr({
        font: "10pt 'Arial'"
      }));
      i++;
    }
    return this.tickMarks = tickSet;
  };

  gb.ui.Chart.prototype.animate = function() {
    var barAnimation, barObj, fillColor, i, max, min, newData, newHeight, newYPos, textAnimation;

    newData = util.randomArray(this.numberOfBars, this.generatorIndex * this.roundUpTo);
    if (this.generatorIndex > 12) {
      this.generatorIndex = 1;
    } else {
      this.generatorIndex++;
    }
    min = util.arrayMin(newData);
    max = util.arrayMax(newData);
    this.topInterval = this.calculateTopInterval(max, this.roundUpTo);
    this.minText.attr({
      text: "min: " + min
    });
    this.maxText.attr({
      text: "max: " + max
    });
    this.topIntervalText.attr({
      text: "top:" + this.topInterval
    });
    if (this.data.length) {
      i = 0;
      while (i < this.data.length) {
        this.data[i] = newData[i];
        newHeight = this.scaledValue(newData[i]);
        newYPos = this.chartBottom - newHeight;
        fillColor = this.colorCode(newData[i]);
        barAnimation = Raphael.animation({
          height: newHeight,
          y: newYPos,
          fill: fillColor,
          "stroke-width": 0
        }, 500, "easeInOut");
        textAnimation = Raphael.animation({
          height: newHeight,
          y: newYPos - 10
        }, 500, "easeInOut");
        barObj = this.bars[i];
        barObj[0].animate(barAnimation);
        barObj[1].attr({
          text: newData[i]
        }).animate(textAnimation);
        i++;
      }
    }
    return this.drawTickMarks();
  };

  /*
  Calculate the actual pixel height:
  barHeight = (value * barCeiling)/ topInterval;
  */


  gb.ui.Chart.prototype.scaledValue = function(value) {
    if (this.topInterval !== 0) {
      return (value * this.barCeiling) / this.topInterval;
    } else {
      return 0;
    }
  };

  /*
  Calculate the nearest top interval:
  topInterval(150,100) -> 200
  */


  gb.ui.Chart.prototype.calculateTopInterval = function(value, interval) {
    if ((value % interval) > 0) {
      return value - (value % interval) + interval;
    } else {
      return value;
    }
  };

  gb.ui.Chart.prototype.colorCode = function(value) {
    var colorMap, i;

    colorMap = {
      treshold: [550, 500, 400, 300, 200],
      color: ["#ff0033", "#ff6633", "#ffcc33", "#8FD600", "#3399CC"],
      def: "#003366"
    };
    i = 0;
    while (i < colorMap.treshold.length) {
      if (value > colorMap.treshold[i]) {
        return colorMap.color[i];
      }
      i++;
    }
    return colorMap.def;
  };

  $(function() {
    var chart, initPage, refresh;

    initPage = function() {
      var chart, interval;

      chart = new gb.ui.Chart(300, 120, 1002, 802);
      chart.init();
      chart.grid(20, 20);
      chart.draw();
      chart.animate();
      return interval = setInterval(refresh, 3000);
    };
    refresh = function() {
      return chart.animate();
    };
    chart = null;
    return initPage();
  });

}).call(this);
